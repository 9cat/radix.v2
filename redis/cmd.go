// Generated by gen.bash.
// DO NOT EDIT THIS FILE DIRECTLY!

package redis

// Cmd is a type for Redis command names.
type Cmd string

const (
	cmdAppend           Cmd = "APPEND"
	cmdAsking           Cmd = "ASKING"
	cmdAuth             Cmd = "AUTH"
	cmdBgrewriteaof     Cmd = "BGREWRITEAOF"
	cmdBgsave           Cmd = "BGSAVE"
	cmdBitcount         Cmd = "BITCOUNT"
	cmdBitop            Cmd = "BITOP"
	cmdBlpop            Cmd = "BLPOP"
	cmdBrpop            Cmd = "BRPOP"
	cmdBrpoplpush       Cmd = "BRPOPLPUSH"
	cmdClient           Cmd = "CLIENT"
	cmdCluster          Cmd = "CLUSTER"
	cmdConfig           Cmd = "CONFIG"
	cmdDbsize           Cmd = "DBSIZE"
	cmdDebug            Cmd = "DEBUG"
	cmdDecr             Cmd = "DECR"
	cmdDecrby           Cmd = "DECRBY"
	cmdDel              Cmd = "DEL"
	cmdDiscard          Cmd = "DISCARD"
	cmdDump             Cmd = "DUMP"
	cmdEcho             Cmd = "ECHO"
	cmdEval             Cmd = "EVAL"
	cmdExec             Cmd = "EXEC"
	cmdExists           Cmd = "EXISTS"
	cmdExpire           Cmd = "EXPIRE"
	cmdExpireat         Cmd = "EXPIREAT"
	cmdFlushall         Cmd = "FLUSHALL"
	cmdFlushdb          Cmd = "FLUSHDB"
	cmdGet              Cmd = "GET"
	cmdGetbit           Cmd = "GETBIT"
	cmdGetrange         Cmd = "GETRANGE"
	cmdGetset           Cmd = "GETSET"
	cmdHdel             Cmd = "HDEL"
	cmdHexists          Cmd = "HEXISTS"
	cmdHget             Cmd = "HGET"
	cmdHgetall          Cmd = "HGETALL"
	cmdHincrby          Cmd = "HINCRBY"
	cmdHincrbyfloat     Cmd = "HINCRBYFLOAT"
	cmdHkeys            Cmd = "HKEYS"
	cmdHlen             Cmd = "HLEN"
	cmdHmget            Cmd = "HMGET"
	cmdHmset            Cmd = "HMSET"
	cmdHset             Cmd = "HSET"
	cmdHsetnx           Cmd = "HSETNX"
	cmdHvals            Cmd = "HVALS"
	cmdIncr             Cmd = "INCR"
	cmdIncrby           Cmd = "INCRBY"
	cmdIncrbyfloat      Cmd = "INCRBYFLOAT"
	cmdInfo             Cmd = "INFO"
	cmdKeys             Cmd = "KEYS"
	cmdLastsave         Cmd = "LASTSAVE"
	cmdLindex           Cmd = "LINDEX"
	cmdLinsert          Cmd = "LINSERT"
	cmdLlen             Cmd = "LLEN"
	cmdLpop             Cmd = "LPOP"
	cmdLpush            Cmd = "LPUSH"
	cmdLpushx           Cmd = "LPUSHX"
	cmdLrange           Cmd = "LRANGE"
	cmdLrem             Cmd = "LREM"
	cmdLset             Cmd = "LSET"
	cmdLtrim            Cmd = "LTRIM"
	cmdMget             Cmd = "MGET"
	cmdMigrate          Cmd = "MIGRATE"
	cmdMonitor          Cmd = "MONITOR"
	cmdMove             Cmd = "MOVE"
	cmdMset             Cmd = "MSET"
	cmdMsetnx           Cmd = "MSETNX"
	cmdMulti            Cmd = "MULTI"
	cmdObject           Cmd = "OBJECT"
	cmdPersist          Cmd = "PERSIST"
	cmdPexpire          Cmd = "PEXPIRE"
	cmdPexpireat        Cmd = "PEXPIREAT"
	cmdPing             Cmd = "PING"
	cmdPsetex           Cmd = "PSETEX"
	cmdPsubscribe       Cmd = "PSUBSCRIBE"
	cmdPttl             Cmd = "PTTL"
	cmdPublish          Cmd = "PUBLISH"
	cmdPunsubscribe     Cmd = "PUNSUBSCRIBE"
	cmdRandomkey        Cmd = "RANDOMKEY"
	cmdRename           Cmd = "RENAME"
	cmdRenamenx         Cmd = "RENAMENX"
	cmdReplconf         Cmd = "REPLCONF"
	cmdRestore          Cmd = "RESTORE"
	cmdRpop             Cmd = "RPOP"
	cmdRpoplpush        Cmd = "RPOPLPUSH"
	cmdRpush            Cmd = "RPUSH"
	cmdRpushx           Cmd = "RPUSHX"
	cmdSadd             Cmd = "SADD"
	cmdSave             Cmd = "SAVE"
	cmdScard            Cmd = "SCARD"
	cmdScript           Cmd = "SCRIPT"
	cmdSdiff            Cmd = "SDIFF"
	cmdSdiffstore       Cmd = "SDIFFSTORE"
	cmdSelect           Cmd = "SELECT"
	cmdSet              Cmd = "SET"
	cmdSetbit           Cmd = "SETBIT"
	cmdSetex            Cmd = "SETEX"
	cmdSetnx            Cmd = "SETNX"
	cmdSetrange         Cmd = "SETRANGE"
	cmdShutdown         Cmd = "SHUTDOWN"
	cmdSinter           Cmd = "SINTER"
	cmdSinterstore      Cmd = "SINTERSTORE"
	cmdSismember        Cmd = "SISMEMBER"
	cmdSlaveof          Cmd = "SLAVEOF"
	cmdSmembers         Cmd = "SMEMBERS"
	cmdSmove            Cmd = "SMOVE"
	cmdSort             Cmd = "SORT"
	cmdSpop             Cmd = "SPOP"
	cmdSrandmember      Cmd = "SRANDMEMBER"
	cmdSrem             Cmd = "SREM"
	cmdStrlen           Cmd = "STRLEN"
	cmdSubscribe        Cmd = "SUBSCRIBE"
	cmdSunion           Cmd = "SUNION"
	cmdSunionstore      Cmd = "SUNIONSTORE"
	cmdSync             Cmd = "SYNC"
	cmdTime             Cmd = "TIME"
	cmdTtl              Cmd = "TTL"
	cmdType             Cmd = "TYPE"
	cmdUnsubscribe      Cmd = "UNSUBSCRIBE"
	cmdUnwatch          Cmd = "UNWATCH"
	cmdWatch            Cmd = "WATCH"
	cmdZadd             Cmd = "ZADD"
	cmdZcard            Cmd = "ZCARD"
	cmdZcount           Cmd = "ZCOUNT"
	cmdZincrby          Cmd = "ZINCRBY"
	cmdZinterstore      Cmd = "ZINTERSTORE"
	cmdZrange           Cmd = "ZRANGE"
	cmdZrangebyscore    Cmd = "ZRANGEBYSCORE"
	cmdZrank            Cmd = "ZRANK"
	cmdZrem             Cmd = "ZREM"
	cmdZremrangebyrank  Cmd = "ZREMRANGEBYRANK"
	cmdZremrangebyscore Cmd = "ZREMRANGEBYSCORE"
	cmdZrevrange        Cmd = "ZREVRANGE"
	cmdZrevrangebyscore Cmd = "ZREVRANGEBYSCORE"
	cmdZrevrank         Cmd = "ZREVRANK"
	cmdZscore           Cmd = "ZSCORE"
	cmdZunionstore      Cmd = "ZUNIONSTORE"
)

// Exec queues a Redis EXEC command for later execution. 
func (mc *MultiCall) Exec(args ...interface{}) {
	mc.call(cmdExec, args...)
}

// Exists queues a Redis EXISTS command for later execution. 
func (mc *MultiCall) Exists(args ...interface{}) {
	mc.call(cmdExists, args...)
}

// Expire queues a Redis EXPIRE command for later execution. 
func (mc *MultiCall) Expire(args ...interface{}) {
	mc.call(cmdExpire, args...)
}

// Expireat queues a Redis EXPIREAT command for later execution. 
func (mc *MultiCall) Expireat(args ...interface{}) {
	mc.call(cmdExpireat, args...)
}

// Flushall queues a Redis FLUSHALL command for later execution. 
func (mc *MultiCall) Flushall(args ...interface{}) {
	mc.call(cmdFlushall, args...)
}

// Flushdb queues a Redis FLUSHDB command for later execution. 
func (mc *MultiCall) Flushdb(args ...interface{}) {
	mc.call(cmdFlushdb, args...)
}

// Get queues a Redis GET command for later execution. 
func (mc *MultiCall) Get(args ...interface{}) {
	mc.call(cmdGet, args...)
}

// Getbit queues a Redis GETBIT command for later execution. 
func (mc *MultiCall) Getbit(args ...interface{}) {
	mc.call(cmdGetbit, args...)
}

// Getrange queues a Redis GETRANGE command for later execution. 
func (mc *MultiCall) Getrange(args ...interface{}) {
	mc.call(cmdGetrange, args...)
}

// Getset queues a Redis GETSET command for later execution. 
func (mc *MultiCall) Getset(args ...interface{}) {
	mc.call(cmdGetset, args...)
}

// Hdel queues a Redis HDEL command for later execution. 
func (mc *MultiCall) Hdel(args ...interface{}) {
	mc.call(cmdHdel, args...)
}

// Hexists queues a Redis HEXISTS command for later execution. 
func (mc *MultiCall) Hexists(args ...interface{}) {
	mc.call(cmdHexists, args...)
}

// Hget queues a Redis HGET command for later execution. 
func (mc *MultiCall) Hget(args ...interface{}) {
	mc.call(cmdHget, args...)
}

// Hgetall queues a Redis HGETALL command for later execution. 
func (mc *MultiCall) Hgetall(args ...interface{}) {
	mc.call(cmdHgetall, args...)
}

// Hincrby queues a Redis HINCRBY command for later execution. 
func (mc *MultiCall) Hincrby(args ...interface{}) {
	mc.call(cmdHincrby, args...)
}

// Hincrbyfloat queues a Redis HINCRBYFLOAT command for later execution. 
func (mc *MultiCall) Hincrbyfloat(args ...interface{}) {
	mc.call(cmdHincrbyfloat, args...)
}

// Hkeys queues a Redis HKEYS command for later execution. 
func (mc *MultiCall) Hkeys(args ...interface{}) {
	mc.call(cmdHkeys, args...)
}

// Hlen queues a Redis HLEN command for later execution. 
func (mc *MultiCall) Hlen(args ...interface{}) {
	mc.call(cmdHlen, args...)
}

// Hmget queues a Redis HMGET command for later execution. 
func (mc *MultiCall) Hmget(args ...interface{}) {
	mc.call(cmdHmget, args...)
}

// Hmset queues a Redis HMSET command for later execution. 
func (mc *MultiCall) Hmset(args ...interface{}) {
	mc.call(cmdHmset, args...)
}

// Hset queues a Redis HSET command for later execution. 
func (mc *MultiCall) Hset(args ...interface{}) {
	mc.call(cmdHset, args...)
}

// Hsetnx queues a Redis HSETNX command for later execution. 
func (mc *MultiCall) Hsetnx(args ...interface{}) {
	mc.call(cmdHsetnx, args...)
}

// Hvals queues a Redis HVALS command for later execution. 
func (mc *MultiCall) Hvals(args ...interface{}) {
	mc.call(cmdHvals, args...)
}

// Incr queues a Redis INCR command for later execution. 
func (mc *MultiCall) Incr(args ...interface{}) {
	mc.call(cmdIncr, args...)
}

// Incrby queues a Redis INCRBY command for later execution. 
func (mc *MultiCall) Incrby(args ...interface{}) {
	mc.call(cmdIncrby, args...)
}

// Incrbyfloat queues a Redis INCRBYFLOAT command for later execution. 
func (mc *MultiCall) Incrbyfloat(args ...interface{}) {
	mc.call(cmdIncrbyfloat, args...)
}

// Info queues a Redis INFO command for later execution. 
func (mc *MultiCall) Info(args ...interface{}) {
	mc.call(cmdInfo, args...)
}

// Keys queues a Redis KEYS command for later execution. 
func (mc *MultiCall) Keys(args ...interface{}) {
	mc.call(cmdKeys, args...)
}

// Lastsave queues a Redis LASTSAVE command for later execution. 
func (mc *MultiCall) Lastsave(args ...interface{}) {
	mc.call(cmdLastsave, args...)
}

// Lindex queues a Redis LINDEX command for later execution. 
func (mc *MultiCall) Lindex(args ...interface{}) {
	mc.call(cmdLindex, args...)
}

// Linsert queues a Redis LINSERT command for later execution. 
func (mc *MultiCall) Linsert(args ...interface{}) {
	mc.call(cmdLinsert, args...)
}

// Llen queues a Redis LLEN command for later execution. 
func (mc *MultiCall) Llen(args ...interface{}) {
	mc.call(cmdLlen, args...)
}

// Lpop queues a Redis LPOP command for later execution. 
func (mc *MultiCall) Lpop(args ...interface{}) {
	mc.call(cmdLpop, args...)
}

// Lpush queues a Redis LPUSH command for later execution. 
func (mc *MultiCall) Lpush(args ...interface{}) {
	mc.call(cmdLpush, args...)
}

// Lpushx queues a Redis LPUSHX command for later execution. 
func (mc *MultiCall) Lpushx(args ...interface{}) {
	mc.call(cmdLpushx, args...)
}

// Lrange queues a Redis LRANGE command for later execution. 
func (mc *MultiCall) Lrange(args ...interface{}) {
	mc.call(cmdLrange, args...)
}

// Lrem queues a Redis LREM command for later execution. 
func (mc *MultiCall) Lrem(args ...interface{}) {
	mc.call(cmdLrem, args...)
}

// Lset queues a Redis LSET command for later execution. 
func (mc *MultiCall) Lset(args ...interface{}) {
	mc.call(cmdLset, args...)
}

// Ltrim queues a Redis LTRIM command for later execution. 
func (mc *MultiCall) Ltrim(args ...interface{}) {
	mc.call(cmdLtrim, args...)
}

// Mget queues a Redis MGET command for later execution. 
func (mc *MultiCall) Mget(args ...interface{}) {
	mc.call(cmdMget, args...)
}

// Migrate queues a Redis MIGRATE command for later execution. 
func (mc *MultiCall) Migrate(args ...interface{}) {
	mc.call(cmdMigrate, args...)
}

// Monitor queues a Redis MONITOR command for later execution. 
func (mc *MultiCall) Monitor(args ...interface{}) {
	mc.call(cmdMonitor, args...)
}

// Move queues a Redis MOVE command for later execution. 
func (mc *MultiCall) Move(args ...interface{}) {
	mc.call(cmdMove, args...)
}

// Mset queues a Redis MSET command for later execution. 
func (mc *MultiCall) Mset(args ...interface{}) {
	mc.call(cmdMset, args...)
}

// Msetnx queues a Redis MSETNX command for later execution. 
func (mc *MultiCall) Msetnx(args ...interface{}) {
	mc.call(cmdMsetnx, args...)
}

// Multi queues a Redis MULTI command for later execution. 
func (mc *MultiCall) Multi(args ...interface{}) {
	mc.call(cmdMulti, args...)
}

// Object queues a Redis OBJECT command for later execution. 
func (mc *MultiCall) Object(args ...interface{}) {
	mc.call(cmdObject, args...)
}

// Persist queues a Redis PERSIST command for later execution. 
func (mc *MultiCall) Persist(args ...interface{}) {
	mc.call(cmdPersist, args...)
}

// Pexpire queues a Redis PEXPIRE command for later execution. 
func (mc *MultiCall) Pexpire(args ...interface{}) {
	mc.call(cmdPexpire, args...)
}

// Pexpireat queues a Redis PEXPIREAT command for later execution. 
func (mc *MultiCall) Pexpireat(args ...interface{}) {
	mc.call(cmdPexpireat, args...)
}

// Ping queues a Redis PING command for later execution. 
func (mc *MultiCall) Ping(args ...interface{}) {
	mc.call(cmdPing, args...)
}

// Psetex queues a Redis PSETEX command for later execution. 
func (mc *MultiCall) Psetex(args ...interface{}) {
	mc.call(cmdPsetex, args...)
}

// Pttl queues a Redis PTTL command for later execution. 
func (mc *MultiCall) Pttl(args ...interface{}) {
	mc.call(cmdPttl, args...)
}

// Publish queues a Redis PUBLISH command for later execution. 
func (mc *MultiCall) Publish(args ...interface{}) {
	mc.call(cmdPublish, args...)
}

// Randomkey queues a Redis RANDOMKEY command for later execution. 
func (mc *MultiCall) Randomkey(args ...interface{}) {
	mc.call(cmdRandomkey, args...)
}

// Rename queues a Redis RENAME command for later execution. 
func (mc *MultiCall) Rename(args ...interface{}) {
	mc.call(cmdRename, args...)
}

// Renamenx queues a Redis RENAMENX command for later execution. 
func (mc *MultiCall) Renamenx(args ...interface{}) {
	mc.call(cmdRenamenx, args...)
}

// Replconf queues a Redis REPLCONF command for later execution. 
func (mc *MultiCall) Replconf(args ...interface{}) {
	mc.call(cmdReplconf, args...)
}

// Restore queues a Redis RESTORE command for later execution. 
func (mc *MultiCall) Restore(args ...interface{}) {
	mc.call(cmdRestore, args...)
}

// Rpop queues a Redis RPOP command for later execution. 
func (mc *MultiCall) Rpop(args ...interface{}) {
	mc.call(cmdRpop, args...)
}

// Rpoplpush queues a Redis RPOPLPUSH command for later execution. 
func (mc *MultiCall) Rpoplpush(args ...interface{}) {
	mc.call(cmdRpoplpush, args...)
}

// Rpush queues a Redis RPUSH command for later execution. 
func (mc *MultiCall) Rpush(args ...interface{}) {
	mc.call(cmdRpush, args...)
}

// Rpushx queues a Redis RPUSHX command for later execution. 
func (mc *MultiCall) Rpushx(args ...interface{}) {
	mc.call(cmdRpushx, args...)
}

// Sadd queues a Redis SADD command for later execution. 
func (mc *MultiCall) Sadd(args ...interface{}) {
	mc.call(cmdSadd, args...)
}

// Save queues a Redis SAVE command for later execution. 
func (mc *MultiCall) Save(args ...interface{}) {
	mc.call(cmdSave, args...)
}

// Scard queues a Redis SCARD command for later execution. 
func (mc *MultiCall) Scard(args ...interface{}) {
	mc.call(cmdScard, args...)
}

// Script queues a Redis SCRIPT command for later execution. 
func (mc *MultiCall) Script(args ...interface{}) {
	mc.call(cmdScript, args...)
}

// Sdiff queues a Redis SDIFF command for later execution. 
func (mc *MultiCall) Sdiff(args ...interface{}) {
	mc.call(cmdSdiff, args...)
}

// Sdiffstore queues a Redis SDIFFSTORE command for later execution. 
func (mc *MultiCall) Sdiffstore(args ...interface{}) {
	mc.call(cmdSdiffstore, args...)
}

// Select queues a Redis SELECT command for later execution. 
func (mc *MultiCall) Select(args ...interface{}) {
	mc.call(cmdSelect, args...)
}

// Set queues a Redis SET command for later execution. 
func (mc *MultiCall) Set(args ...interface{}) {
	mc.call(cmdSet, args...)
}

// Setbit queues a Redis SETBIT command for later execution. 
func (mc *MultiCall) Setbit(args ...interface{}) {
	mc.call(cmdSetbit, args...)
}

// Setex queues a Redis SETEX command for later execution. 
func (mc *MultiCall) Setex(args ...interface{}) {
	mc.call(cmdSetex, args...)
}

// Setnx queues a Redis SETNX command for later execution. 
func (mc *MultiCall) Setnx(args ...interface{}) {
	mc.call(cmdSetnx, args...)
}

// Setrange queues a Redis SETRANGE command for later execution. 
func (mc *MultiCall) Setrange(args ...interface{}) {
	mc.call(cmdSetrange, args...)
}

// Shutdown queues a Redis SHUTDOWN command for later execution. 
func (mc *MultiCall) Shutdown(args ...interface{}) {
	mc.call(cmdShutdown, args...)
}

// Sinter queues a Redis SINTER command for later execution. 
func (mc *MultiCall) Sinter(args ...interface{}) {
	mc.call(cmdSinter, args...)
}

// Sinterstore queues a Redis SINTERSTORE command for later execution. 
func (mc *MultiCall) Sinterstore(args ...interface{}) {
	mc.call(cmdSinterstore, args...)
}

// Sismember queues a Redis SISMEMBER command for later execution. 
func (mc *MultiCall) Sismember(args ...interface{}) {
	mc.call(cmdSismember, args...)
}

// Slaveof queues a Redis SLAVEOF command for later execution. 
func (mc *MultiCall) Slaveof(args ...interface{}) {
	mc.call(cmdSlaveof, args...)
}

// Smembers queues a Redis SMEMBERS command for later execution. 
func (mc *MultiCall) Smembers(args ...interface{}) {
	mc.call(cmdSmembers, args...)
}

// Smove queues a Redis SMOVE command for later execution. 
func (mc *MultiCall) Smove(args ...interface{}) {
	mc.call(cmdSmove, args...)
}

// Sort queues a Redis SORT command for later execution. 
func (mc *MultiCall) Sort(args ...interface{}) {
	mc.call(cmdSort, args...)
}

// Spop queues a Redis SPOP command for later execution. 
func (mc *MultiCall) Spop(args ...interface{}) {
	mc.call(cmdSpop, args...)
}

// Srandmember queues a Redis SRANDMEMBER command for later execution. 
func (mc *MultiCall) Srandmember(args ...interface{}) {
	mc.call(cmdSrandmember, args...)
}

// Srem queues a Redis SREM command for later execution. 
func (mc *MultiCall) Srem(args ...interface{}) {
	mc.call(cmdSrem, args...)
}

// Strlen queues a Redis STRLEN command for later execution. 
func (mc *MultiCall) Strlen(args ...interface{}) {
	mc.call(cmdStrlen, args...)
}

// Sunion queues a Redis SUNION command for later execution. 
func (mc *MultiCall) Sunion(args ...interface{}) {
	mc.call(cmdSunion, args...)
}

// Sunionstore queues a Redis SUNIONSTORE command for later execution. 
func (mc *MultiCall) Sunionstore(args ...interface{}) {
	mc.call(cmdSunionstore, args...)
}

// Sync queues a Redis SYNC command for later execution. 
func (mc *MultiCall) Sync(args ...interface{}) {
	mc.call(cmdSync, args...)
}

// Time queues a Redis TIME command for later execution. 
func (mc *MultiCall) Time(args ...interface{}) {
	mc.call(cmdTime, args...)
}

// Ttl queues a Redis TTL command for later execution. 
func (mc *MultiCall) Ttl(args ...interface{}) {
	mc.call(cmdTtl, args...)
}

// Type queues a Redis TYPE command for later execution. 
func (mc *MultiCall) Type(args ...interface{}) {
	mc.call(cmdType, args...)
}

// Unwatch queues a Redis UNWATCH command for later execution. 
func (mc *MultiCall) Unwatch(args ...interface{}) {
	mc.call(cmdUnwatch, args...)
}

// Watch queues a Redis WATCH command for later execution. 
func (mc *MultiCall) Watch(args ...interface{}) {
	mc.call(cmdWatch, args...)
}

// Zadd queues a Redis ZADD command for later execution. 
func (mc *MultiCall) Zadd(args ...interface{}) {
	mc.call(cmdZadd, args...)
}

// Zcard queues a Redis ZCARD command for later execution. 
func (mc *MultiCall) Zcard(args ...interface{}) {
	mc.call(cmdZcard, args...)
}

// Zcount queues a Redis ZCOUNT command for later execution. 
func (mc *MultiCall) Zcount(args ...interface{}) {
	mc.call(cmdZcount, args...)
}

// Zincrby queues a Redis ZINCRBY command for later execution. 
func (mc *MultiCall) Zincrby(args ...interface{}) {
	mc.call(cmdZincrby, args...)
}

// Zinterstore queues a Redis ZINTERSTORE command for later execution. 
func (mc *MultiCall) Zinterstore(args ...interface{}) {
	mc.call(cmdZinterstore, args...)
}

// Zrange queues a Redis ZRANGE command for later execution. 
func (mc *MultiCall) Zrange(args ...interface{}) {
	mc.call(cmdZrange, args...)
}

// Zrangebyscore queues a Redis ZRANGEBYSCORE command for later execution. 
func (mc *MultiCall) Zrangebyscore(args ...interface{}) {
	mc.call(cmdZrangebyscore, args...)
}

// Zrank queues a Redis ZRANK command for later execution. 
func (mc *MultiCall) Zrank(args ...interface{}) {
	mc.call(cmdZrank, args...)
}

// Zrem queues a Redis ZREM command for later execution. 
func (mc *MultiCall) Zrem(args ...interface{}) {
	mc.call(cmdZrem, args...)
}

// Zremrangebyrank queues a Redis ZREMRANGEBYRANK command for later execution. 
func (mc *MultiCall) Zremrangebyrank(args ...interface{}) {
	mc.call(cmdZremrangebyrank, args...)
}

// Zremrangebyscore queues a Redis ZREMRANGEBYSCORE command for later execution. 
func (mc *MultiCall) Zremrangebyscore(args ...interface{}) {
	mc.call(cmdZremrangebyscore, args...)
}

// Zrevrange queues a Redis ZREVRANGE command for later execution. 
func (mc *MultiCall) Zrevrange(args ...interface{}) {
	mc.call(cmdZrevrange, args...)
}

// Zrevrangebyscore queues a Redis ZREVRANGEBYSCORE command for later execution. 
func (mc *MultiCall) Zrevrangebyscore(args ...interface{}) {
	mc.call(cmdZrevrangebyscore, args...)
}

// Zrevrank queues a Redis ZREVRANK command for later execution. 
func (mc *MultiCall) Zrevrank(args ...interface{}) {
	mc.call(cmdZrevrank, args...)
}

// Zscore queues a Redis ZSCORE command for later execution. 
func (mc *MultiCall) Zscore(args ...interface{}) {
	mc.call(cmdZscore, args...)
}

// Zunionstore queues a Redis ZUNIONSTORE command for later execution. 
func (mc *MultiCall) Zunionstore(args ...interface{}) {
	mc.call(cmdZunionstore, args...)
}
